{% if tables.count > 0 %}
{% set accessModifier %}public{% endset %}
import Foundation

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "String" %}
    _ p{{forloop.counter}}: Any
    {% else %}
    _ p{{forloop.counter}}: {{type}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "String" %}
    String(describing: p{{forloop.counter}})
    {% elif type == "UnsafeRawPointer" %}
    Int(bitPattern: p{{forloop.counter}})
    {% else %}
    p{{forloop.counter}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item %}
  {% for string in item.strings %}
  {% if not param.noComments %}
  /// {{string.translation}}
  {% endif %}
  {% if string.types %}
  {{accessModifier}} static func {{string.name|swiftIdentifier|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
    {{enumName}}.tr("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %})
  }
  {% elif param.lookupFunction %}
  {# custom localization function is mostly used for in-app lang selection, so we want the loc to be recomputed at each call for those (hence the computed var) #}
  {{accessModifier}} static var {{string.name|swiftIdentifier|lowerFirstWord|escapeReservedKeywords}}: String { return {{enumName}}.tr("{{table}}", "{{string.key}}") }
  {% else %}
  {{accessModifier}} static func {{string.name|swiftIdentifier|lowerFirstWord|escapeReservedKeywords}}() -> String {
    {{enumName}}.tr("{{table}}", "{{string.key}}")
  }
  {% endif %}
  {% endfor %}
  {% for child in item.children %}
  {{accessModifier}} enum {{child.name|swiftIdentifier|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call recursiveBlock table child %}{% endfilter %}
  }
  {% endfor %}
{% endmacro %}

{% set enumName %}L10n{% endset %}
{{accessModifier}} enum {{enumName}} {
  {% if tables.count > 1 or param.forceFileNameEnum %}
  {% for table in tables %}
  {{accessModifier}} enum {{table.name|swiftIdentifier|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call recursiveBlock table.name table.levels %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock tables.first.name tables.first.levels %}
  {% endif %}
}

extension {{enumName}} {
  private static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {
    if let path = Bundle.module.path(forResource: LanguageManager.shared.current.identifier, ofType: "lproj"), let bundle = Bundle(path: path) {
        let format = bundle.localizedString(forKey: key, value: nil, table: table)
        return String(format: format, locale: LanguageManager.shared.locale, arguments: args)
    } else {
        {% if param.lookupFunction %}
        let format = {{ param.lookupFunction }}(key, table)
    {% else %}
        let format = Bundle.module.localizedString(forKey: key, value: nil, table: table)
    {% endif %}
        return String(format: format, locale: LanguageManager.shared.locale, arguments: args)
    }
  }
}
{% if not param.lookupFunction %}
{% endif %}
{% else %}
// No string found
{% endif %}